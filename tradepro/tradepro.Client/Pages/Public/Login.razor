@page "/login"
@using MudBlazor
@using Blazored.LocalStorage
@using Newtonsoft.Json
@using tradepro.Client.RestClient
@using tradepro.Logic.Request
@using tradepro.Logic.DTOs
@using tradepro.Client.Common.Model
@inject NavigationManager Navigation
@inject IRestClient RestClient
@inject ILocalStorageService _localstorage;

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h5" Class="mb-2">Login</MudText>
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <MudTextField @bind-Value="loginModel.Email" Label="Email" Required="true" />
            <MudTextField @bind-Value="loginModel.Password" Label="Password" InputType="InputType.Password" Required="true" />
            <MudButton Type="Button" OnClick="@((e) => HandleLogin())" Variant="Variant.Filled" Color="Color.Primary" Class="mt-2">Login</MudButton>
        </EditForm>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudText Typo="Typo.body2" Color="Color.Error">@errorMessage</MudText>
        }
    </MudPaper>
</MudContainer>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;
    private LoginResult loginResult = new LoginResult();
    private async Task HandleLogin()
    {
        try
        {
            Console.WriteLine("HandleLogin called");
            var response = await RestClient.LoginAsync(loginModel);

            if (response.IsSuccessStatusCode)
            {
                var responseBody = await response.Content.ReadAsStringAsync();
                loginResult = JsonConvert.DeserializeObject<LoginResult>(await response.Content.ReadAsStringAsync());
                // // Parse the response then save credentail to localstore

                var token = loginResult.accessToken.Replace("\"", "");
                await _localstorage.SetItemAsync("token", loginResult.accessToken.Replace("\"", ""));
                await _localstorage.SetItemAsync("expiredIn", loginResult.expiresIn);

                var item = await RestClient.GetUserInfoAsync();
                // var user = new UserInfoDto();
                // user = item;
                // Console.WriteLine(user.Id);
                // Console.WriteLine(user.Role);
                // Console.WriteLine(user.Name);

                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid login attempt.";
                Console.WriteLine("Login failed: " + response.ReasonPhrase);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            // Reload the page
            Navigation.NavigateTo("/login", forceLoad: true);
        }
    }
}